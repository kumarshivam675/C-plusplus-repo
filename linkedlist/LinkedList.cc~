#include"LinkedList.h"
#include"Node.h"

#include<iostream>
#include<cstdlib>
#include<cstddef>

using namespace std;

LinkedList::LinkedList(){
	head = NULL;
}
void LinkedList::insert(int val, int pos){
	int k = 1;
	Node* new_node = new Node(val);
	if(head == NULL){
		head = new_node;
	}
	else if(pos == 0 && head != NULL){
		new_node->setNext(head);
		head = new_node;
	}
	
	else{
		Node* current = new Node();
		current = head;
		while(k < pos){
			current = current->getNext();
			k++;
		}
		Node* prev = new Node();
		prev = current;
		current = current->getNext();
		prev->setNext(new_node);
		if(current == NULL)
			new_node->setNext(NULL);
		else
			new_node->setNext(current);
	}
	

}

void LinkedList::traverse(){
	Node* current = new Node();
	current = head;
	while(current != NULL){
		cout << current->getValue() << endl;
		current = current->getNext();
	}
}

void LinkedList::deleteNode(int pos){
	int k = 1;
	if(pos == 0){
		Node* current = new Node();
		current = head;
		head = head->getNext();
		delete current;
	}
		
	else{
		Node* current = new Node();
		Node* nextNode = new Node();
		current = head;
		Node* prev = new Node();
		while(k < pos){
			current = current->getNext();
			k++;
		}
		prev = current;
		current = current->getNext();
		nextNode = current->getNext();
		if(current == NULL)
			prev->setNext(NULL);
		else
			prev->setNext(nextNode);
		
		delete current;
	}
}

void LinkedList::search(int val){
	int pos = 0;
	Node* current = new Node();
	current = head;
	while(current != NULL){
		if(current->getValue() == val){
			cout << "found at position: " << pos << endl;
			break;
		}
		current = current->getNext();
		pos++;
	}
}


Node* LinkedList::getHead(){
	return head;
}











	

