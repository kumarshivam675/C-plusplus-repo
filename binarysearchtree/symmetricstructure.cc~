#include<iostream>
#include<climits>
#include<malloc.h>

using namespace std;

struct Node{
	int data;
	Node* left;
	Node* right;
};

Node* createNode(int key){
	struct Node* node = (Node*)malloc(sizeof(Node));
	node->data = key;
	node->left = NULL;
	node->right = NULL;
	return node;
}

void Inorder(struct Node* node){
	if(node == NULL)
		return ;
	Inorder(node->left);
	cout << node->data << endl;
	Inorder(node->right);
}

bool isSymmetric(Node* r1, Node* r2){
    if(r1 == NULL || r2 == NULL)
        return (r1 == r2);
        
    //else if(r1 == NULL || r2 == NULL)
        //return false;
        
    return isSymmetric(r1->right,r2->left) && isSymmetric(r1->left,r2->right);
}

bool isSymmetricValue(Node* r1, Node* r2){
    if(r1 == NULL && r2 == NULL)
        return true;
    if(r1 == NULL || r2 == NULL)
        return false;
        
    if(r1->data != r2->data)
        return false;
        
    return isSymmetricValue(r1->right,r2->left) && isSymmetricValue(r1->left,r2->right);
}

int main(){
	struct Node *root;
	root = createNode(3);
	root->left = createNode(2);
	//root->left->left = createNode(-1);
	root->left->right = createNode(4);
	root->right = createNode(2);
	root->right->left = createNode(5);
	//root->right->right = createNode(9);
	cout << isSymmetricValue(root->left,root->right) << endl;
	return 0;
}
